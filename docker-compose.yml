volumes:
  panov-k_customer-service-db:
  panov-k_order-service-db:

services:
  report-service:
    pull_policy: build
    container_name: report-service
    build:
      context: .
      dockerfile: ./src/Ozon.Panov.Route256.Practice.CustomerReportService/Dockerfile
    image: report-service:latest
    depends_on:
      order-service:
        condition: service_started
    ports:
      - "8090:5001"
    environment:
      ROUTE256_ORDER_SERVICE_URL: "http://order-service:5002"

  customer-service-db:
    image: postgres:latest
    container_name: customer-service-db
    restart: unless-stopped
    ports:
      - "5482:5482"
    command:
      -p 5482
    environment:
      POSTGRES_DB: customer-service-db
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - panov-k_customer-service-db:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U test -d customer-service-db -p 5482" ]
      interval: 10s
      timeout: 5s
      retries: 5

  customer-service:
    pull_policy: build
    container_name: customer-service
    build:
      context: ./external/customer-service/src/Ozon.Route256.CustomerService
      dockerfile: Dockerfile
    image: customer-service:latest
    ports:
      - "8081:5001"
      - "8082:5002"
    depends_on:
      customer-service-db:
        condition: service_healthy
    environment:
      ROUTE256_CUSTOMER_SERVICE_DB_CONNECTION_STRING: "User ID=test;Password=test;Host=customer-service-db;Port=5482;Database=customer-service-db;"
  
  order-service-db:
    image: postgres:latest
    container_name: order-service-db
    ports:
      - "5435:5435"
    command:
      -p 5435
    environment:
      POSTGRES_DB: order-service-db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - panov-k_order-service-db:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d order-service-db -p 5435" ]
      interval: 10s
      timeout: 5s
      retries: 5
  
  order-service:
    pull_policy: build
    container_name: order-service
    build:
      context: ./external/order-service/Ozon.Route256.OrderService/Ozon.Route256.OrderService
      dockerfile: Dockerfile
    image: order-service:latest
    ports:
      - "8083:5001"
      - "8084:5002"
    depends_on:
      order-service-db:
        condition: service_healthy
      kafka-setup:
        condition: service_completed_successfully
    environment:
      ROUTE256_KAFKA_BROKERS: "broker-1:29091,broker-2:29092"
      ROUTE256_ORDER_SERVICE_DB_CONNECTION_STRING: "Server=order-service-db;User Id=postgres;Password=password;Port=5435;Database=order-service-db;"
      
  data-generator-1:
    pull_policy: build
    container_name: data-generator-1
    build:
      context: ./external/data-generator/src
      dockerfile: ./Ozon.Route256.DataGenerator/Dockerfile
    image: data-generator:latest
    ports:
      - "8087:8080"
    depends_on:
      customer-service:
        condition: service_started
      kafka-setup:
        condition: service_completed_successfully
    environment:
      ROUTE256_KAFKA_BROKERS: "broker-1:29091,broker-2:29092"
      ROUTE256_ORDERS_PER_SECOND: 10             # 1-100
      ROUTE256_CUSTOMERS_PER_SECOND: 2           # 1-10
      ROUTE256_INVALID_ORDER_COUNTER_NUMBER: 1   # 0-10000
      ROUTE256_CUSTOMER_SERVICE_URL: "http://customer-service:5002"
  
  data-generator-2:
    pull_policy: build
    image: data-generator:latest
    container_name: data-generator-2
    ports:
      - "8088:8080"
    depends_on:
      customer-service:
        condition: service_started
      kafka-setup:
        condition: service_completed_successfully
      data-generator-1:
        condition: service_started
    environment:
      ROUTE256_KAFKA_BROKERS: "broker-1:29091,broker-2:29092"
      ROUTE256_ORDERS_PER_SECOND: 50               # 1-100
      ROUTE256_CUSTOMERS_PER_SECOND: 5             # 1-10
      ROUTE256_INVALID_ORDER_COUNTER_NUMBER: 10  # 0-10000
      ROUTE256_CUSTOMER_SERVICE_URL: "http://customer-service:5002"
  
  data-generator-3:
    pull_policy: build
    image: data-generator:latest
    container_name: data-generator-3
    ports:
      - "8089:8080"
    depends_on:
      customer-service:
        condition: service_started
      kafka-setup:
        condition: service_completed_successfully
      data-generator-1:
        condition: service_started
    environment:
      ROUTE256_KAFKA_BROKERS: "broker-1:29091,broker-2:29092"
      ROUTE256_ORDERS_PER_SECOND: 100               # 1-100
      ROUTE256_CUSTOMERS_PER_SECOND: 10             # 1-10
      ROUTE256_INVALID_ORDER_COUNTER_NUMBER: 10000  # 0-10000
      ROUTE256_CUSTOMER_SERVICE_URL: "http://customer-service:5002"
      
  zookeeper:
    image: zookeeper:latest
    container_name: zookeeper
    restart: always
    environment:
      ALLOW_ANONYMOUS_LOGIN: yes
    ports:
      - "2181:2181"

  broker-1:
    image: bitnami/kafka:latest
    container_name: broker-1
    restart: always
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_LISTENERS: CLIENT://:29091,EXTERNAL://:9091
      KAFKA_CFG_ADVERTISED_LISTENERS: CLIENT://broker-1:29091,EXTERNAL://broker-1:9091
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: CLIENT
    ports:
      - "9091:9091"
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "broker-1:29091"]
      interval: 10s
      timeout: 5s
      retries: 5

  broker-2:
    image: bitnami/kafka:latest
    container_name: broker-2
    restart: always
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_LISTENERS: CLIENT://:29092,EXTERNAL://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: CLIENT://broker-2:29092,EXTERNAL://broker-2:9092
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: CLIENT
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "broker-2:29092"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-setup:
      image: bitnami/kafka:latest
      depends_on:
        broker-1:
          condition: service_healthy
        broker-2:
          condition: service_healthy
      command: >
        bash -c "
          kafka-topics.sh --create --topic orders_input --partitions 3 --replication-factor 2 --if-not-exists --bootstrap-server broker-1:29091 && 
          kafka-topics.sh --create --topic orders_input_errors --partitions 3 --replication-factor 2 --if-not-exists --bootstrap-server broker-1:29091 && 
          kafka-topics.sh --create --topic order_output_events --partitions 3 --replication-factor 2 --if-not-exists --bootstrap-server broker-1:29091"
